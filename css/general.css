/*
--- 01 TYPOGRAPHY SYSTEM

- Font sizes (px)
10 / 12 / 14 / 16 / 18 / 20 / 24 / 30 / 36 / 44 / 52 / 62 / 74 / 86 / 98

- Font weights
Default: 400
Medium: 500
Semi-bold: 600
Bold: 700

- Line heights
Default: 1
Small: 1.05
Medium: 1.2
Paragraph default: 1.6

- Letter spacing
-0.5px
0.75px

--- 02 COLORS

- Primary: #e67e22
- Tints:
#fdf2e9
#fae5d3
#eb984e

- Shades:
#cf711f
#45260a

- Accents:
- Greys

#888
#767676 (lightest grey allowed on #fff)
#6f6f6f (lightest grey allowed on #fdf2e9)
#555
#333

NB: Genarted from tintsandshades.com website

--- 05 SHADOWS

0 2.4rem 4.8rem rgba(0, 0, 0, 0.075);

--- 06 BORDER-RADIUS

Default: 9px
Medium: 11px

--- 07 WHITESPACE

- Spacing system (px)
2 / 4 / 8 / 12 / 16 / 24 / 32 / 48 / 64 / 80 / 96 / 128
*/

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  /* font-size: 10px */
  /* 10px / 16px => 0.625 => 62.5% */
  /* percentage of users font-size browser settings */
  font-size: 62.5%;
  /* This is a nice trick for animations on horizontal axes
  Like moving animations from right or left to viewport. So we
  use transform and translate, but will set overflow-x to hidden
  on both html and body so we can't scroll in right or left direction as that
  will be a wrose ux.
  And this only works if nothing is positioned absolute in
  relation to dody
  */
  overflow-x: hidden;

  /* this property doesn't work on safari. And even chrome uses
  safari for rendering on macbooks and iphones. So we won't have
  smooth scrolling just by this. Check the support for safari
  Edge supports it now*/
  scroll-behavior: smooth;
}

body {
  font-family: "Rubik", sans-serif;
  line-height: 1;
  font-weight: 400;
  color: #555;

  overflow-x: hidden;
}

/***********************/
/* GENERAL REUSBALE COMPONENTS */
/***********************/

/* REUSABLE Grid with 2 ,3 and 4 columns*/
.container {
  /* Convention that other grids should have 1200px width on larger screens
  and 1300px for Hero */
  max-width: 120rem;
  padding: 3.2rem;
  margin: 0 auto;
}

.grid {
  display: grid;
  column-gap: 6.4rem;
  row-gap: 9.6rem;

  /* Cannot add here as all the other will have it too cuz it
  reusable and we have already used it multiple times */
  /* margin-bottom: 9.6rem; */
}

/* .grid:last-child {
    margin-bottom: 0;
} */

/* Nice trick using (not) psuedoclass to add margin-bottom to all grids but not to
the grid which is the last child of the container. In the above commented out
one, we will have to write at multiple places if we want no margin
on the last grid child. But this takes of all the last grid childs*/
.grid:not(:last-child) {
  margin-bottom: 9.6rem;
}

.grid--2-cols {
  grid-template-columns: repeat(2, 1fr);
}

.grid--3-cols {
  grid-template-columns: repeat(3, 1fr);
}

.grid--4-cols {
  grid-template-columns: repeat(4, 1fr);
}

.grid--5-cols {
  grid-template-columns: repeat(5, 1fr);
}

/* Following reusable grid paractices. If we set this align-items
property on the grid itself then the reusability is lost
Hence we will add classes here and then in html where needed */
.grid--center-v {
  align-items: center;
}

.primary-heading,
.heading-secondary {
  font-weight: 700;
  color: #333;
  letter-spacing: -0.5px;
}

.primary-heading {
  font-size: 5.2rem;
  line-height: 1.05;
  margin-bottom: 4.2rem;
}

.heading-secondary {
  font-size: 4.4rem;
  line-height: 1.2;
  margin-bottom: 4.4rem;
}

.heading-tertiary {
  font-size: 3.6rem;
  line-height: 1.2;
  margin-bottom: 3.2rem;
}

.subheading {
  display: block;
  font-size: 1.6rem;
  font-weight: 500;
  color: #cf711f;
  text-transform: uppercase;
  margin-bottom: 1.6rem;
  letter-spacing: 0.75px;
}

.btn,
.btn:link,
.btn:visited {
  display: inline-block;
  text-decoration: none;
  font-size: 2rem;
  font-weight: 600;
  padding: 1.6rem 3.2rem;
  border-radius: 9px;

  /* Only necessary for .btn */
  border: none;
  cursor: pointer;

  /* Always put this on original state otherwise it wont work */
  /* tansition: all if we want to transition all the props */
  transition: background-color 0.3s;
}

.btn--full:link,
.btn--full:visited {
  background-color: #e67e22;
  color: #fff;
}

.btn--full:hover,
.btn--full:active {
  background-color: #cf711f;
}

.btn--outline:link,
.btn--outline:visited {
  background-color: #fff;
  color: #555;
}

.btn--outline:hover,
.btn--outline:active {
  background-color: #fdf2e9;

  /* Setting this way will add border to outside and will distore
  the ui when hover over it. Instead we will use a trick to add border
  to inside so it doesnt add extra pixels by adding border to outside and
  distort ui

  border: 3px solid #fff;
  */
  /* TRICK TO ADD BORDER INSIDE */
  box-shadow: inset 0 0 0 3px #fff;
}

.btn--form {
  background-color: #45260a;
  color: #fdf2e9;
  align-self: end;
  padding: 1.2rem;
}

.btn--form:hover {
  background-color: #fff;
  color: #555;
}

/* we remove the underline and add underline in this way
which is ideal and look good by adding some padding bottom so
there is space between text and line */
.link:link,
.link:visited {
  display: inline-block;
  color: #e67e22;
  text-decoration: none;
  /* currentColor is the text color above in this block and
  in this way the borderbottom will have the same color if we change
  it on hover so both the text and line will be of same color */
  border-bottom: 1px solid currentColor;
  padding-bottom: 2px;
}

.link:hover,
.link:active {
  color: #cf711f;
  /* One of the practice is then to remove this border bottom that
  we gave on hover but there is a trick for that cuz the
  border-bottom: none; will not work as it will distort the ui by
  1px. So the trick is using the transparent keywrod as follow */
  /* border-bottom: none; */
  border-bottom: 1px solid transparent;
  transition: all 0.3s;
}

.list {
  list-style: none;
}

.list-item {
  font-size: 1.8rem;
  display: flex;
  align-items: center;
  gap: 1.6rem;
}

.list-icon {
  width: 3rem;
  height: 3rem;
  color: #e67e22;
}

/* Focus states is cuz of property call outline
We will customize the focus state now and the border*/
*:focus {
  /* This will remove the focus states completely. Focus states
    are for accessibility. For someone using keyboard only
    this will be a nightmare.*/
  outline: none;

  box-shadow: 0 0 0 0.8rem rgba(230, 125, 34, 0.5);
}

/* As lists are good candidates for reusability we have moved
it to the general css file and we will reuse it where needed */

/* !important should be used with helper classes as a good practice */
.margin-right-sm {
  margin-right: 1.6rem !important;
}

.margin-bottom-md {
  margin-bottom: 2.4rem !important;
}

.center-text {
  text-align: center;
}

strong {
  font-weight: 500;
}
